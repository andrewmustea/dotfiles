#!/bin/bash

#
# ~/.bash_profile
#


# paths and environment variables
# --------------------

# remove given directories from a path string
__path_remove() {
  if (( $# < 2 )); then
    echo "error: $0 needs a path string and at least one path to remove" 1>&2
    echo "usage: $0 <path_string> <path>..." 1>&2
  fi

  [[ -z "$1" ]] && return

  local new_path=":${1}:"
  for p in "${@:2}"; do
    new_path="${new_path//":${p}:"/":"}"
    [[ "${new_path}" == ":" ]] && return
  done

  echo "${new_path:1:-1}"
}

# prepend given directories to a path string
__path_prepend() {
  if (( $# < 2 )); then
    echo "error: $0 needs a path string and at least one path to prepend" 1>&2
    echo "usage: $0 <path_string> <path>..." 1>&2
  fi

  local old_path="$1"
  local prepend
  for p in "${@:2}"; do
    if [[ -d "$p" ]] && [[ ":${prepend}:" != *":${p}:"* ]]; then
      if [[ ":${old_path}:" == *":${p}:"* ]]; then
        old_path="$(__path_remove "${old_path}" "$p")"
      fi
      prepend="${prepend:+"${prepend}:"}${p}"
    fi
  done

  echo "${prepend:+"${prepend}:"}${old_path}"
}

# append given directories to a path string
__path_append() {
  if (( $# < 2 )); then
    echo "error: $0 needs a path string and at least one path to append" 1>&2
    echo "usage: $0 <path_string> <path>..." 1>&2
  fi

  local old_path="$1"
  local append
  for p in "${@:2}"; do
    if [[ -d "$p" ]] && [[ ":${append}:" != *":${p}:"* ]]; then
      if [[ ":${old_path}:" == *":${p}:"* ]]; then
        old_path="$(__path_remove "${old_path}" "$p")"
      fi
      append="${append:+"${append}:"}${p}"
    fi
  done

  echo "${old_path}${append:+":${append}"}"
}

# remove directories from a path
remove_from_path() { PATH="$(__path_remove "${PATH}" "$@")"; export PATH; }
remove_from_fpath() { FPATH="$(__path_remove "${FPATH}" "$@")"; export FPATH; }
remove_from_infopath() { INFOPATH="$(__path_remove "${INFOPATH}" "$@")"; export INFOPATH; }
remove_from_pythonpath() { PYTHONPATH="$(__path_remove "${PYTHONPATH}" "$@")"; export PYTHONPATH; }

# prepend directories to a path if the directory exists
prepend_path() { PATH="$(__path_prepend "${PATH}" "$@")"; export PATH; }
prepend_fpath() { FPATH="$(__path_prepend "${FPATH}" "$@")"; export FPATH; }
prepend_infopath() { INFOPATH="$(__path_prepend "${INFOPATH}" "$@")"; export INFOPATH; }
prepend_pythonpath() { PYTHONPATH="$(__path_prepend "${PYTHONPATH}" "$@")"; export PYTHONPATH; }

# append directories to a path if the directory exists
append_path() { PATH="$(__path_append "${PATH}" "$@")"; export PATH; }
append_fpath() { FPATH="$(__path_append "${FPATH}" "$@")"; export FPATH; }
append_infopath() { INFOPATH="$(__path_append "${INFOPATH}" "$@")"; export INFOPATH; }
append_pythonpath() { PYTHONPATH="$(__path_append "${PYTHONPATH}" "$@")"; export PYTHONPATH; }

# xdg home directories
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_STATE_HOME="${HOME}/.local/state"

# xdg runtime directory
if pidof systemd >/dev/null 2>&1; then
  export XDG_RUNTIME_DIR="/run/user/${UID}"
else
  mkdir --parents "/tmp/user/${UID}"
  export XDG_RUNTIME_DIR="/tmp/user/${UID}"
fi

# command history
export HISTCONTROL"=ignoredups"
export HISTFILE="${XDG_STATE_HOME}/bash/history"
export HISTFILESIZE=100000
export HISTORY_IGNORE="history:pwd:ls:ll:la:l:dir:"
export HISTSIZE=100000
export HISTTIMEFORMAT="%F %T "


# program paths
# --------------------

# homebrew
if [[ -x /home/linuxbrew/.linuxbrew/bin/brew ]]; then
  export HOMEBREW_PREFIX="/home/linuxbrew/.linuxbrew"
  export HOMEBREW_CELLAR="${HOMEBREW_PREFIX}/Cellar"
  export HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}"
  prepend_path "${HOMEBREW_PREFIX}/sbin"
  prepend_path "${HOMEBREW_PREFIX}/bin"
  prepend_infopath "${HOMEBREW_PREFIX}/share/info"
fi

# home local bin
prepend_path "${HOME}/.local/bin"

# cabal
export CABAL_DIR="${XDG_DATA_HOME}/cabal"
prepend_path "${CABAL_DIR}/bin"

# cargo
export CARGO_HOME="${XDG_DATA_HOME}/cargo"
prepend_path "${CARGO_HOME}/bin"

# docker
export DOCKER_CONFIG="${XDG_CONFIG_HOME}/docker"

# gcc
export GCC_COLORS="error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01"

# gem
export GEM_SPEC_CACHE="${XDG_CACHE_HOME}/gem"

# go
export GOPATH="${XDG_DATA_HOME}/go"
prepend_path "${GOPATH}/bin"

# gpg
GPG_TTY="$(tty)"
export GPG_TTY

# less
export LESS="-QR --no-vbell"
export LESSHISTFILE="${XDG_STATE_HOME}/less/history"
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;38;5;74m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[38;5;246m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[04;38;5;146m'

# lesspipe
hash lesspipe.sh &>/dev/null && eval "$(SHELL=/bin/sh lesspipe.sh)"

# man
export MANPAGER="less -QR --no-vbell"

# npm
export NPM_CONFIG_USERCONFIG="${XDG_CONFIG_HOME}/npm/npmrc"

# nvim
if hash nvim &>/dev/null; then
  export EDITOR="nvim"
else
  export EDITOR="vim"
fi

# nvm
export NVM_DIR="${XDG_CONFIG_HOME}/nvm"
if [[ -d "${NVM_DIR}" ]]; then
  source "${NVM_DIR}/nvm.sh" || true
  source "${NVM_DIR}/bash_completion" || true
fi

# pass
export PASSWORD_STORE_DIR="${XDG_DATA_HOME}/pass"

# pylint
export PYLINTHOME="${XDG_CACHE_HOME}/pylint"

# rustup
export RUSTUP_HOME="${XDG_DATA_HOME}/rustup"

# stack
export STACK_ROOT="${XDG_DATA_HOME}/stack"
prepend_path "${STACK_ROOT}/bin"

# wezterm
export WEZTERM_CONFIG_FILE="${XDG_CONFIG_HOME}/wezterm/wezterm.lua"

# wine
export WINEPREFIX="${XDG_DATA_HOME}/wine"


# git functions
# --------------------

# print the branch name of the current directory or a given one
git_current_branch() {
  local dir="${PWD}"
  if (( $# > 1 )); then
    echo "error: too many arguments: $*" 1>&2
    echo "usage: $0 [branch]" 1>&2
    return 1
  elif (( $# == 1 )); then
    dir="$1"
  fi

  git -C "${dir}" rev-parse --abbrev-ref HEAD
}

# run an interactive rebase starting at a given commit
rebase_at_commit() {
  if (( $# == 0 )); then
    echo "error: missing commit-id" 1>&2
    echo "usage: $0 <commit-id>" 1>&2
    return 1
  elif (( $# > 1 )); then
    echo "error: too many arguments: $*" 1>&2
    echo "usage: $0 <commit-id>" 1>&2
    return 1
  fi

  git rebase --interactive "${1}^"
}

# rebase a branch on a given remote without having to manually stash any changes
rebase_remote() {
  if (( $# == 0 )); then
    echo "error: need remote name" 1>&2
    echo "usage: $0 <remote> [branch]" 1>&2
  fi

  local current_branch
  current_branch="$(git_current_branch "$2")"
  if [[ -z "${current_branch}" ]]; then
    return 1
  fi

  local branch="master"
  if (( $# == 1 )); then
    branch="$2"
  fi

  git fetch --all
  git rebase "$1/${branch}" "${branch}"

  if [[ "${current_branch}" != "${branch}" ]]; then
    git checkout "${current_branch}"
  fi
}

# add a pattern to .git/info/exclude
add_exclude() {
  local repo="${PWD}"
  if (( $# == 0 )); then
    echo "error: missing exclude argument" 1>&2
    echo "usage: $0 <exclude-type> [directory]" 1>&2
    return 1
  elif (( $# > 2 )); then
    echo "error: too many arguments: $*" 1>&2
    echo "usage: $0 <exclude-type> [directory]" 1>&2
    return 1
  elif (( $# == 2 )); then
    repo="$2"
  fi

  local exclude="${repo}/.git/info/exclude"
  if [[ ! -f "${exclude}" ]]; then
    echo "error: git exclude file not found: '${exclude}'" 1>&2
    return 1
  fi

  if ! grep -q "$(printf '^%q$' "$1")" "${exclude}"; then
    echo "adding '$1' to '${exclude}'"
    echo "$1" >> "${exclude}"
  else
    echo "'$1' already exists in '${exclude}'" 1>&2
  fi
}

# add '.vscode*' to .git/info/exclude
add_exclude_vscode() {
  local repo="${PWD}"
  if (( $# > 1 )); then
    echo "error: too many arguments" 1>&2
    echo "usage: $0 [repository]" 1>&2
    return 1
  elif (( $# == 1 )); then
    repo="$1"
  fi
  add_exclude ".vscode*" "${repo}"
}

# run a diff against the same branch on a remote
diff_remote() {
  if (( $# == 0 )); then
    echo "error: missing remote name" 1>&2
    echo "usage: $0 <remote> [diff args]" 1>&2
    return 1
  fi

  if ! git remote | grep -q "$1"; then
    echo "error: unknown remote '$1'" 1>&2
    return 1
  fi

  git diff "${1}/$(git_current_branch)" "${@:2}"
}

# run difftool against the same branch on a remote
difftool_remote() {
  if (( $# == 0 )); then
    echo "error: missing remote name" 1>&2
    echo "usage: $0 <remote> [difftool args]" 1>&2
    return 1
  fi

  if ! git remote | grep -q "$1"; then
    echo "error: unknown remote '$1'" 1>&2
    return 1
  fi

  git difftool "${1}/$(git_current_branch)" "${@:2}"
}


# other functions
# --------------------

# print path directories separated by newlines
print_path() {
  echo "${1:-"${PATH}"}" | tr ':' '\n'
}

# find a process
psgrep() {
  pgrep "$@" | xargs --no-run-if-empty ps -fp
}

# find and kill processes
pskill() {
  kill -9 "$(psgrep "$@" | awk 'NR>1 { print $2 }')"
}

# always return successfully when sourcing a file
safe_source() {
  source "$1" || true
}

# extract from a compressed file
extract() {
  if (( $# == 0 )); then
    echo "error: missing file argument" 1>&2
    echo "usage: $0 <file> [options]" 1>&2
    return 1
  fi

  case "$1" in
    *.tar.bz2) tar xvjf "$@" ;;
    *.tar.gz) tar xvzf "$@" ;;
    *.tar.xz) tar xvf "$@" ;;
    *.bz2) bunzip2 "$@" ;;
    *.gz) gunzip "$@" ;;
    *.rar) unrar x "$@" ;;
    *.tar) tar xvf "$@" ;;
    *.tbz2) tar xvjf "$@" ;;
    *.tgz) tar xvzf "$@" ;;
    *.zip) unzip "$@" ;;
    *.Z) uncompress "$@" ;;
    *.7z) 7z x "$@" ;;
    *)
      echo "error: unknown compressed file type '.${1#*.}'" 1>&2
      return 1
      ;;
  esac
}

# rc files
# --------------------

[[ -r "${HOME}/.bash_login" ]] && source "${HOME}/.bash_login"

[[ -r "${HOME}/.bashrc" ]] && source "${HOME}/.bashrc"
