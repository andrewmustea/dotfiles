#!/bin/bash

#
# ~/.bashrc
#


# If not running interactively, don't do anything
case $- in
    *i*) ;;
    *) return ;;
esac


# --------------------------------------------------
# shell options
# --------------------------------------------------


# bash history
#
PROMPT_COMMAND='history -a'
HISTSIZE=10000
HISTFILESIZE=100000
export HISTCONTROL=ignoredups
export HISTIGNORE='history:pwd:ls:ll:la:l:'
export HISTTIMEFORMAT='%F %T '
export HISTFILE="$STATE/bash/history"


# gpg tty
#
GPG_TTY=$(tty)
export GPG_TTY


# --------------------------------------------------
# extra XDG settings
# --------------------------------------------------


# wget
#
alias wget="wget --hsts-file=\"$DATA/wget-hsts\""


# azure
#
export AZURE_CONFIG_DIR="$DATA/azure"
export AZURE_DEVOPS_CACHE_DIR="$CACHE/azure-devops"


# npm
#
export NPM_CONFIG_USERCONFIG="$CONFIG/npm/npmrc"


# gem
#
export GEM_SPEC_CACHE="$XDG_CACHE_HOME/gem"


# pass
#
export PASSWORD_STORE_DIR="$DATA/pass"


# --------------------------------------------------
# path additions
# --------------------------------------------------


# local home bin
#
HOME_BIN="$HOME/.local/bin"
if [[ "$PATH" != *$HOME_BIN* ]]; then
    export PATH="${PATH:+${PATH}:}$HOME_BIN"
fi


# python
#
export PYLINTHOME="${XDG_CACHE_HOME}"/pylint

alias {pip,pip3}='python3 -m pip'
alias venv='python3 -m venv'

pip-update-all() {
    pip list --outdated --format=freeze | grep -v '^\-e' | \
        cut -d = -f 1 | xargs -n1 pip install -U -I
}


# rust
#
alias cargo-update='cargo install-update --all'

export CARGO_HOME="$DATA"/cargo
export RUSTUP_HOME="$DATA"/rustup
if [[ -d "$CARGO_HOME/bin" ]] && [[ "$PATH" != *$CARGO_HOME/bin* ]]; then
    export PATH="$CARGO_HOME/bin:$PATH"

    # bat cache
    if ! [[ -d "$CACHE/bat" ]]; then
        echo "Rebuilding bat cache..."
        bat cache --build
    fi
fi


# go
#
GO_BIN=/usr/local/go/bin
if [[ -d "$GO_BIN" ]]; then
    if [[ "$PATH" != *$GO_BIN* ]]; then
        export PATH="${PATH:+${PATH}:}$GO_BIN"
    fi
    export GOPATH="$DATA"/go
    if [[ -d "$GOPATH"/bin ]] && [[ "$PATH" != *$GOPATH/bin* ]]; then
        export PATH="${PATH:+${PATH}:}$GOPATH/bin"
    fi
fi


# haskell
#
export STACK_ROOT="$XDG_DATA_HOME"/stack
export CABAL_DIR="$DATA"/cabal
if [[ -d "$CABAL_DIR" ]] && [[ "$PATH" != *$CABAL_DIR/bin* ]]; then
    export PATH="$CABAL_DIR/bin:$PATH"
fi


# fzf
#
FZF_DIR="$DATA/fzf"
FZF_ENV="$CONFIG/fzf/fzf.bash"
[[ -f "$FZF_ENV" ]] && [[ -x "$FZF_DIR/bin/fzf" ]] && source "$FZF_ENV"

update-fzf() {
    if ! [[ -d $FZF_DIR ]]; then
        echo "Couldn't find fzf direcotry in '$FZF_DIR'"
        return 1
    fi
    git -C "$FZF_DIR" pull
    "$FZF_DIR/install --xdg --bin"
}

# fzf can use fd-find
if which fd &>/dev/null; then
    export FZF_DEFAULT_COMMAND='command fd -HI --type file'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi


# lua lsp
#
LUA_LSP="$DATA/lua-language-server/bin"
if [[ -d "$LUA_LSP" ]] && [[ "$PATH" != *$LUA_LSP* ]]; then
    export PATH="${PATH:+${PATH}:}$LUA_LSP"
fi


# nvm
#
export NVM_DIR="$XDG_CONFIG_HOME/nvm"
if [[ -d "$NVM_DIR" ]]; then
    source "$NVM_DIR/nvm.sh"
    source "$NVM_DIR/bash_completion"
fi


# --------------------------------------------------
# projects
# --------------------------------------------------


# local projects
#
PROJECTS_DIR="$HOME/projects"
export PROJECTS_DIR

ASCII_ART="$PROJECTS_DIR/ascii_art"
[[ -d "$ASCII_ART" ]] && source "$ASCII_ART/ascii.bash"


# --------------------------------------------------
# git settings
# --------------------------------------------------


# git aliases
#
alias gs='git status'
alias gf='git fetch'
alias gfa='git fetch --all'
alias gp='git pull'
alias gst='git stash'
alias ga='git add'
alias gaa='git add .'
alias gc='git commit'
alias gca='git commit --amend'
alias gb='git branch'
alias gd='git diff'
alias gdh='git diff HEAD'
alias gds='git diff --staged'
alias gdt='git difftool'
alias gdth='git difftool HEAD'
alias gdts='git difftool --staged'
alias gmt='git mergetool'
alias gr='git remote'
alias grv='git remote -v'

alias git-show-message='git show -s --format=%s'
alias git-reset-last='git reset HEAD~1'

alias rebase-origin='rebase-remote origin'
alias rebase-upstream='rebase-remote upstream'

alias diff-origin='diff-remote origin'
alias diff-upstream='diff-remote upstream'
alias difftool-origin='difftool-remote origin'
alias difftool-upstream='difftool-remote upstream'


# print the branch name of the current directory or a given one
get-branch-name() {
    local dir=$PWD
    if [[ -n "$1" ]]; then
        dir="$1"
    fi

    git -C "$dir" rev-parse --abbrev-ref HEAD
}

# run an interactive rebase starting at a given commit
rebase-commit() {
    if [[ -z "$1" ]]; then
        echo "error: missing commit-id"
        echo "usage: update-past-commit <commit-id>"
        return 1
    fi

    git rebase --interactive "$1"^
}

# rebase a branch on a given remote without having to manually stash any changes
rebase-remote() {
    if [[ $# -eq 0 ]]; then
        echo 'error: need remote name'
        echo 'usage: rebase-remote <remote> [branch]'
    fi

    local current_branch
    current_branch=$(get-branch-name "$2")
    if [[ -z "$current_branch" ]]; then
        return 1
    fi

    local branch="master"
    if [[ $# -gt 1 ]]; then
        branch="$2"
    fi

    git fetch --all
    git rebase "$1/$branch" "$branch"

    if [[ "$current_branch" != "$branch" ]]; then
        git checkout "$current_branch"
    fi
}

# add a line to a repositories .git/info/exclude
add-exclude() {
    local repo_config="$PWD"
    if [[ $# -eq 2 ]]; then
        repo_config=$2
    elif [[ $# -ne 1 ]]; then
        echo "error: bad arguments: '$*'"
        echo 'usage: add_exclude <exclude-line> [repo-directory]'
        return 1
    fi

    repo_config+='/.git/info/exclude'
    if [[ -z "$repo_config" ]]; then
        echo "error: repo_config not found: '$repo_config'"
        return 1
    fi

    if ! grep -q "^${1}\$" "$repo_config"; then
        echo "adding '$1' to '$repo_config'"
        echo "$1" >> "$repo_config"
    else
        echo "'$1' already exists in '$repo_config'"
    fi
}

# add the hidden .vscode directory to .git/info/exclude
add-exclude-vscode() {
    local repo=$PWD
    if [[ -n "$1" ]]; then
        repo=$1
    fi
    add-exclude '.vscode/' "$repo"
}

# diff compare against a remote
diff-remote() {
    if [[ -z "$1" ]]; then
        echo "diff-remote <remote> [diff args]"
    fi
    git diff "$1/$(get-branch-name)" "${@:2}"
}

# difftool compare against a remote
difftool-remote() {
    if [[ -z "$1" ]]; then
        echo "difftool-remote <remote> [difftool args]"
    fi
    git difftool "$1/$(get-branch-name)" "${@:2}"
}

